// Generated by gencpp from file drone_test/Y_Serial_port.msg
// DO NOT EDIT!


#ifndef DRONE_TEST_MESSAGE_Y_SERIAL_PORT_H
#define DRONE_TEST_MESSAGE_Y_SERIAL_PORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_test
{
template <class ContainerAllocator>
struct Y_Serial_port_
{
  typedef Y_Serial_port_<ContainerAllocator> Type;

  Y_Serial_port_()
    : mode(0)
    , tar1(0)
    , tar2(0)
    , if_takeoff(0)  {
    }
  Y_Serial_port_(const ContainerAllocator& _alloc)
    : mode(0)
    , tar1(0)
    , tar2(0)
    , if_takeoff(0)  {
  (void)_alloc;
    }



   typedef int8_t _mode_type;
  _mode_type mode;

   typedef int8_t _tar1_type;
  _tar1_type tar1;

   typedef int8_t _tar2_type;
  _tar2_type tar2;

   typedef int8_t _if_takeoff_type;
  _if_takeoff_type if_takeoff;





  typedef boost::shared_ptr< ::drone_test::Y_Serial_port_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_test::Y_Serial_port_<ContainerAllocator> const> ConstPtr;

}; // struct Y_Serial_port_

typedef ::drone_test::Y_Serial_port_<std::allocator<void> > Y_Serial_port;

typedef boost::shared_ptr< ::drone_test::Y_Serial_port > Y_Serial_portPtr;
typedef boost::shared_ptr< ::drone_test::Y_Serial_port const> Y_Serial_portConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_test::Y_Serial_port_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_test::Y_Serial_port_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_test::Y_Serial_port_<ContainerAllocator1> & lhs, const ::drone_test::Y_Serial_port_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.tar1 == rhs.tar1 &&
    lhs.tar2 == rhs.tar2 &&
    lhs.if_takeoff == rhs.if_takeoff;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_test::Y_Serial_port_<ContainerAllocator1> & lhs, const ::drone_test::Y_Serial_port_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_test::Y_Serial_port_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_test::Y_Serial_port_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_test::Y_Serial_port_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_test::Y_Serial_port_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_test::Y_Serial_port_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_test::Y_Serial_port_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_test::Y_Serial_port_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae4cda509b27984341a3ec103b7367d7";
  }

  static const char* value(const ::drone_test::Y_Serial_port_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae4cda509b279843ULL;
  static const uint64_t static_value2 = 0x41a3ec103b7367d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_test::Y_Serial_port_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_test/Y_Serial_port";
  }

  static const char* value(const ::drone_test::Y_Serial_port_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_test::Y_Serial_port_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 mode\n"
"int8 tar1\n"
"int8 tar2\n"
"int8 if_takeoff \n"
"\n"
;
  }

  static const char* value(const ::drone_test::Y_Serial_port_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_test::Y_Serial_port_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.tar1);
      stream.next(m.tar2);
      stream.next(m.if_takeoff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Y_Serial_port_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_test::Y_Serial_port_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_test::Y_Serial_port_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "tar1: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tar1);
    s << indent << "tar2: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tar2);
    s << indent << "if_takeoff: ";
    Printer<int8_t>::stream(s, indent + "  ", v.if_takeoff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_TEST_MESSAGE_Y_SERIAL_PORT_H
