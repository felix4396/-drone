// Generated by gencpp from file drone_test/detection.msg
// DO NOT EDIT!


#ifndef DRONE_TEST_MESSAGE_DETECTION_H
#define DRONE_TEST_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_test
{
template <class ContainerAllocator>
struct detection_
{
  typedef detection_<ContainerAllocator> Type;

  detection_()
    : erro_x(0.0)
    , erro_y(0.0)
    , flag(0)
    , start_opencv(0)  {
    }
  detection_(const ContainerAllocator& _alloc)
    : erro_x(0.0)
    , erro_y(0.0)
    , flag(0)
    , start_opencv(0)  {
  (void)_alloc;
    }



   typedef double _erro_x_type;
  _erro_x_type erro_x;

   typedef double _erro_y_type;
  _erro_y_type erro_y;

   typedef int8_t _flag_type;
  _flag_type flag;

   typedef int8_t _start_opencv_type;
  _start_opencv_type start_opencv;





  typedef boost::shared_ptr< ::drone_test::detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_test::detection_<ContainerAllocator> const> ConstPtr;

}; // struct detection_

typedef ::drone_test::detection_<std::allocator<void> > detection;

typedef boost::shared_ptr< ::drone_test::detection > detectionPtr;
typedef boost::shared_ptr< ::drone_test::detection const> detectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_test::detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_test::detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_test::detection_<ContainerAllocator1> & lhs, const ::drone_test::detection_<ContainerAllocator2> & rhs)
{
  return lhs.erro_x == rhs.erro_x &&
    lhs.erro_y == rhs.erro_y &&
    lhs.flag == rhs.flag &&
    lhs.start_opencv == rhs.start_opencv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_test::detection_<ContainerAllocator1> & lhs, const ::drone_test::detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_test::detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_test::detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_test::detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_test::detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_test::detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_test::detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_test::detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5758eab71db35db21ff4cedc29365b18";
  }

  static const char* value(const ::drone_test::detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5758eab71db35db2ULL;
  static const uint64_t static_value2 = 0x1ff4cedc29365b18ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_test::detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_test/detection";
  }

  static const char* value(const ::drone_test::detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_test::detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 erro_x\n"
"float64 erro_y\n"
"int8 flag\n"
"int8 start_opencv\n"
;
  }

  static const char* value(const ::drone_test::detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_test::detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.erro_x);
      stream.next(m.erro_y);
      stream.next(m.flag);
      stream.next(m.start_opencv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_test::detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_test::detection_<ContainerAllocator>& v)
  {
    s << indent << "erro_x: ";
    Printer<double>::stream(s, indent + "  ", v.erro_x);
    s << indent << "erro_y: ";
    Printer<double>::stream(s, indent + "  ", v.erro_y);
    s << indent << "flag: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "start_opencv: ";
    Printer<int8_t>::stream(s, indent + "  ", v.start_opencv);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_TEST_MESSAGE_DETECTION_H
