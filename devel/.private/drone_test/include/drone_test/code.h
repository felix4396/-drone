// Generated by gencpp from file drone_test/code.msg
// DO NOT EDIT!


#ifndef DRONE_TEST_MESSAGE_CODE_H
#define DRONE_TEST_MESSAGE_CODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_test
{
template <class ContainerAllocator>
struct code_
{
  typedef code_<ContainerAllocator> Type;

  code_()
    : code(0)  {
    }
  code_(const ContainerAllocator& _alloc)
    : code(0)  {
  (void)_alloc;
    }



   typedef int8_t _code_type;
  _code_type code;





  typedef boost::shared_ptr< ::drone_test::code_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_test::code_<ContainerAllocator> const> ConstPtr;

}; // struct code_

typedef ::drone_test::code_<std::allocator<void> > code;

typedef boost::shared_ptr< ::drone_test::code > codePtr;
typedef boost::shared_ptr< ::drone_test::code const> codeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_test::code_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_test::code_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_test::code_<ContainerAllocator1> & lhs, const ::drone_test::code_<ContainerAllocator2> & rhs)
{
  return lhs.code == rhs.code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_test::code_<ContainerAllocator1> & lhs, const ::drone_test::code_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_test::code_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_test::code_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_test::code_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_test::code_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_test::code_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_test::code_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_test::code_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95cfa23476470f3d4705c11337b96909";
  }

  static const char* value(const ::drone_test::code_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95cfa23476470f3dULL;
  static const uint64_t static_value2 = 0x4705c11337b96909ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_test::code_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_test/code";
  }

  static const char* value(const ::drone_test::code_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_test::code_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 code\n"
;
  }

  static const char* value(const ::drone_test::code_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_test::code_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct code_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_test::code_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_test::code_<ContainerAllocator>& v)
  {
    s << indent << "code: ";
    Printer<int8_t>::stream(s, indent + "  ", v.code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_TEST_MESSAGE_CODE_H
